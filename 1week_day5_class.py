# -*- coding: utf-8 -*-
"""1week/day5/class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dKQDFWbA5AHkiGHRu02CBTdyPsYuxzWk
"""

from collections import Counter

sales_data = [
    {"customer_id": 1, "product": "Smartphone", "price": 600, "quantity": 1, "date": "2023-04-03"},
    {"customer_id": 2, "product": "Laptop", "price": 1200, "quantity": 1, "date": "2023-04-04"},
    {"customer_id": 1, "product": "Laptop", "price": 1000, "quantity": 1, "date": "2023-04-05"},
    {"customer_id": 2, "product": "Smartphone", "price": 500, "quantity": 2, "date": "2023-04-06"},
    {"customer_id": 3, "product": "Headphones", "price": 150, "quantity": 4, "date": "2023-04-07"},
    {"customer_id": 3, "product": "Smartphone", "price": 550, "quantity": 1, "date": "2023-04-08"},
    {"customer_id": 1, "product": "Headphones", "price": 100, "quantity": 2, "date": "2023-04-09"},
]

# Task 1: Total Sales Calculation
total_sales = {}
for sale in sales_data:
    total_sales[sale["product"]] = total_sales.get(sale["product"], 0) + sale["price"] * sale["quantity"]

print("Total Sales for Each Product Category:")
for product, sales in total_sales.items():
    print(f"{product}: ${sales}")

# Task 2: Customer Spending Profile
customer_spending = {}
for sale in sales_data:
    customer_spending[sale["customer_id"]] = customer_spending.get(sale["customer_id"], 0) + sale["price"] * sale["quantity"]

print("\nCustomer Spending Profile:")
for customer, spending in customer_spending.items():
    print(f"Customer {customer}: ${spending}")

# Task 3: Sales Data Enhancement
for sale in sales_data:
    sale["total_price"] = sale["price"] * sale["quantity"]

# Task 4: High-Value Transactions
high_value_transactions = [sale for sale in sales_data if sale["total_price"] > 500]
high_value_transactions.sort(key=lambda x: x["total_price"], reverse=True)

print("\nHigh-Value Transactions:")
for sale in high_value_transactions:
    print(sale)

# Task 5: Customer Loyalty Identification
loyal_customers = [customer for customer, count in Counter(sale["customer_id"] for sale in sales_data).items() if count > 1]

print("\nLoyal Customers:")
for customer in loyal_customers:
    print(f"Customer {customer} is a loyal customer.")

# Task 6: Bonus - Insights and Analysis

# Calculate the average transaction value for each product category
average_transaction_value = {}
product_quantities = Counter(sale["product"] for sale in sales_data)
for product, total_sales_product in total_sales.items():  # Rename the variable used for iteration
    average_transaction_value[product] = total_sales_product / product_quantities[product]

print("\nAverage Transaction Value for Each Product Category:")
for product, avg_value in average_transaction_value.items():
    print(f"{product}: ${avg_value}")

# Identify the most popular product based on the quantity sold
most_popular_product = max(total_sales, key=total_sales.get)
print("\nMost Popular Product based on Quantity Sold:", most_popular_product)

# Insights for marketing strategies:
print("\nMarketing Strategy Insights:")
print("1. Promote high-value transactions by offering discounts or bundles for purchases over $500.")
print("2. Focus marketing efforts on the most popular product to maximize sales.")
print("3. Offer loyalty rewards or incentives to encourage repeat purchases from loyal customers.")