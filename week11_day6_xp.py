# -*- coding: utf-8 -*-
"""Week11/day6/xp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/195ctVpMl_JPp_KogUmBrar8S3SAqh6mI

Exercise 1
"""

import scipy
print(scipy.__version__)

"""Exercise 2"""

import scipy.stats as stats
import numpy as np

data = [12, 15, 13, 12, 18, 20, 22, 21]

# Calculate mean
mean = stats.tmean(data)

# Calculate median
median = np.median(data)  # Using numpy for median calculation

# Calculate variance
variance = stats.tvar(data)

# Calculate standard deviation
std_dev = stats.tstd(data)

# Print results
print(f"Mean: {mean}")
print(f"Median: {median}")
print(f"Variance: {variance}")
print(f"Standard Deviation: {std_dev}")

"""Exercise 3"""

import numpy as np
from scipy import stats
import matplotlib.pyplot as plt

# Set the parameters
mean = 50
std_dev = 10

# Generate the data
x = np.linspace(mean - 4*std_dev, mean + 4*std_dev, 100)
y = stats.norm.pdf(x, mean, std_dev)

# Create the plot
plt.figure(figsize=(10, 6))
plt.plot(x, y, 'b-', linewidth=2, label='Normal Distribution')
plt.title(f'Normal Distribution (Mean={mean}, SD={std_dev})')
plt.xlabel('Value')
plt.ylabel('Probability Density')
plt.grid(True, alpha=0.3)
plt.legend()

# Add vertical lines for mean and standard deviations
plt.axvline(mean, color='r', linestyle='dashed', linewidth=2, label='Mean')
for i in range(1, 4):
    plt.axvline(mean + i*std_dev, color='g', linestyle=':', linewidth=2, label=f'+{i} SD' if i == 1 else '')
    plt.axvline(mean - i*std_dev, color='g', linestyle=':', linewidth=2, label=f'-{i} SD' if i == 1 else '')

plt.legend()

# Show the plot
plt.show()

"""Exercise 4"""

import numpy as np
from scipy import stats
import matplotlib.pyplot as plt


# Generate two sets of random data
group1 = np.random.normal(loc=50, scale=10, size=100)  # mean=50, std=10
group2 = np.random.normal(loc=52, scale=10, size=100)  # mean=52, std=10

# Perform independent two-sample t-test
t_statistic, p_value = stats.ttest_ind(group1, group2)

# Print results
print(f"T-statistic: {t_statistic}")
print(f"P-value: {p_value}")

# Interpret the results
alpha = 0.05
if p_value < alpha:
    print("Reject the null hypothesis.")
else:
    print("Fail to reject the null hypothesis.")

# Visualize the data
plt.figure(figsize=(10, 6))
plt.hist(group1, bins=20, alpha=0.5, label='Group 1')
plt.hist(group2, bins=20, alpha=0.5, label='Group 2')
plt.title('Distribution of Two Random Datasets')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.legend()
plt.show()

"""Exercise 5,6"""

import zipfile
import os
import pandas as pd
import scipy.stats as stats

# Unzip the dataset
zip_file_path = '/content/archive_iris.zip'
extract_path = 'iris_data'

with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

csv_file_path = os.path.join(extract_path, 'Iris.csv')

# Load the Iris dataset
iris_df = pd.read_csv(csv_file_path)

# Analysing the 'SepalLengthCm' column
column_name = 'SepalLengthCm'
sepal_length = iris_df[column_name]

# Calculate descriptive statistics
desc_stats = stats.describe(sepal_length)

# Print the results
print(f"Descriptive Statistics for {column_name}:")
print(f"Number of observations: {desc_stats.nobs}")
print(f"Minimum: {desc_stats.minmax[0]:.2f}")
print(f"Maximum: {desc_stats.minmax[1]:.2f}")
print(f"Mean: {desc_stats.mean:.2f}")
print(f"Variance: {desc_stats.variance:.2f}")
print(f"Skewness: {desc_stats.skewness:.2f}")
print(f"Kurtosis: {desc_stats.kurtosis:.2f}")

# Calculate median
median = np.median(sepal_length)
print(f"Median: {median:.2f}")

# Calculate mode
mode_result = stats.mode(sepal_length)
mode = mode_result.mode
print(f"Mode: {mode:.2f}")

# Calculate standard deviation
std_dev = stats.tstd(sepal_length)
print(f"Standard Deviation: {std_dev:.2f}")

# Calculate confidence interval for the mean (95% confidence level)
ci = stats.t.interval(confidence=0.95, df=len(sepal_length)-1, loc=np.mean(sepal_length), scale=stats.sem(sepal_length))
print(f"95% Confidence Interval for the Mean: ({ci[0]:.2f}, {ci[1]:.2f})")

