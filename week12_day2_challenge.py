# -*- coding: utf-8 -*-
"""Week12/day2/challenge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R5BKIk6yfDbwNnfgIDoc5mklK1_V51qX
"""

import numpy as np
import pandas as pd

# Seed for reproducibility
np.random.seed(0)

# Number of entries
n_entries = 1000

# Simulating dataset
time = np.linspace(0, 100, n_entries)  # Time variable
temperature = 20 + 5 * np.sin(np.pi * time / 50) + np.random.normal(0, 0.5, n_entries)  # Temperature (with some noise)
pressure = 1013 + 20 * np.cos(np.pi * time / 25) + np.random.normal(0, 1, n_entries)  # Pressure (with some noise)
chemical_concentration = 5 + 2 * np.sin(np.pi * time / 10) + np.random.normal(0, 0.2, n_entries)  # Chemical concentration

# Creating DataFrame
ninja_data = pd.DataFrame({
    'Time': time,
    'Temperature': temperature,
    'Pressure': pressure,
    'Chemical Concentration': chemical_concentration
})
ninja_data.head()

from scipy.fft import fft

# Normalization
def normalize(series):
    return (series - np.mean(series)) / np.std(series)

# Fourier Transformation
def apply_fft(series):
    return np.abs(fft(series.to_numpy()))

# List of columns to transform
columns_to_transform = ['Temperature', 'Pressure', 'Chemical Concentration']

# Apply normalization
normalized_data = ninja_data.copy()
for column in columns_to_transform:
    normalized_data[f'{column}_normalized'] = normalize(ninja_data[column])

# Attempt FFT transformation
fft_data = {}
for column in columns_to_transform:
    try:
        fft_data[column] = apply_fft(ninja_data[column])
    except Exception as e:
        print(f"An error occurred while applying FFT to '{column}': {e}")

# Print results
print("\nNormalized Data:")
print(normalized_data.head())

# Calculate and print statistics
print("\nStatistics:")
for column in columns_to_transform:
    print(f"\n{column}:")
    print(f"  Mean: {np.mean(ninja_data[column]):.4f}")
    print(f"  Standard Deviation: {np.std(ninja_data[column]):.4f}")
    if column in fft_data:
        print(f"  Max FFT Component: {np.max(fft_data[column]):.4f}")
        print(f"  FFT Shape: {fft_data[column].shape}")
    else:
        print("  FFT could not be calculated")

# Print the first few rows of the original data for verification
print("\nFirst few rows of original ninja_data:")
print(ninja_data.head())

# Print FFT results
print("\nFFT Results (first 5 components):")
for column in fft_data:
    print(f"\n{column}:")
    print(fft_data[column][:5])

from scipy import stats


# Correlation Analysis
correlation_matrix = ninja_data.corr()

print("Correlation Matrix:")
print(correlation_matrix)

# Interpret correlations
def interpret_correlation(corr):
    if abs(corr) < 0.3:
        return "weak"
    elif abs(corr) < 0.7:
        return "moderate"
    else:
        return "strong"

for col1 in correlation_matrix.columns:
    for col2 in correlation_matrix.columns:
        if col1 != col2:
            corr = correlation_matrix.loc[col1, col2]
            strength = interpret_correlation(corr)
            print(f"The correlation between {col1} and {col2} is {corr:.2f} ({strength}).")

# Inferential Statistics

# 1. T-test: Compare mean Temperature to a hypothetical value
t_stat, p_value = stats.ttest_1samp(ninja_data['Temperature'], 20)
print("\nOne-sample t-test for Temperature:")
print(f"t-statistic: {t_stat:.4f}")
print(f"p-value: {p_value:.4f}")

# 2. ANOVA: Compare means of Chemical Concentration for different Temperature ranges
# First, categorize Temperature into ranges
ninja_data['Temp_Range'] = pd.cut(ninja_data['Temperature'], bins=3, labels=['Low', 'Medium', 'High'])
temp_ranges = ninja_data['Temp_Range'].unique()
concentrations = [group['Chemical Concentration'].values for name, group in ninja_data.groupby('Temp_Range')]

f_stat, p_value = stats.f_oneway(*concentrations)
print("\nOne-way ANOVA for Chemical Concentration across Temperature ranges:")
print(f"F-statistic: {f_stat:.4f}")
print(f"p-value: {p_value:.4f}")

# 3. Linear Regression: Predict Pressure based on Temperature
slope, intercept, r_value, p_value, std_err = stats.linregress(ninja_data['Temperature'], ninja_data['Pressure'])
print("\nLinear Regression: Pressure vs Temperature")
print(f"Slope: {slope:.4f}")
print(f"Intercept: {intercept:.4f}")
print(f"R-squared: {r_value**2:.4f}")
print(f"p-value: {p_value:.4f}")

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.fft import fft

# Drop the Temp_Range column
ninja_data = ninja_data.drop('Temp_Range', axis=1)

# Set the style for seaborn plots
sns.set(style="whitegrid")

# 1. Heatmap for Correlation Matrix
plt.figure(figsize=(10, 8))
sns.heatmap(ninja_data.corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0)
plt.title('Correlation Heatmap')
plt.tight_layout()
plt.show()

# 2. Pairplot for Multi-dimensional Scatter Plots
sns.pairplot(ninja_data, diag_kind='kde')
plt.suptitle('Pairwise Relationships', y=1.02)
plt.tight_layout()
plt.show()


# 4. Time Series Plot
plt.figure(figsize=(12, 8))
for column in ['Temperature', 'Pressure', 'Chemical Concentration']:
    plt.plot(ninja_data['Time'], ninja_data[column], label=column)
plt.title('Time Series of All Variables')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.tight_layout()
plt.show()

# 5. Distribution Plots
fig, axs = plt.subplots(3, 1, figsize=(12, 15))
for i, column in enumerate(['Temperature', 'Pressure', 'Chemical Concentration']):
    sns.histplot(ninja_data[column], kde=True, ax=axs[i])
    axs[i].set_title(f'Distribution of {column}')
plt.tight_layout()
plt.show()

# 6. Scatter Plot Matrix with Trend Lines
sns.pairplot(ninja_data, kind="reg", diag_kind="kde")
plt.suptitle('Scatter Plot Matrix with Trend Lines', y=1.02)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

def plot_fft_results(fft_data, num_components=20):
    fig, axs = plt.subplots(3, 1, figsize=(12, 15))
    for i, (column, data) in enumerate(fft_data.items()):
        axs[i].bar(range(num_components), data[:num_components])
        axs[i].set_title(f'FFT of {column}')
        axs[i].set_xlabel('Frequency Component')
        axs[i].set_ylabel('Magnitude')
        axs[i].set_yscale('log')  # Use log scale for better visibility
    plt.tight_layout()
    plt.show()

plot_fft_results(fft_data)

"""The data reveals a complex system with a cooling trend, regular pressure fluctuations, and rapid chemical concentration changes. Each variable shows distinct cyclical behaviors, operating on different time scales. This could represent a carefully controlled experiment or a natural system with multiple, interacting periodic processes."""