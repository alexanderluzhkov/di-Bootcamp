# -*- coding: utf-8 -*-
"""Week12/day2/xp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15HUgEd3Bh2c20FrkzgvPHOW0nNGJ9R_D

Exercise 1
"""

import numpy as np
import matplotlib.pyplot as plt

# Given data
house_sizes = np.array([50, 70, 80, 100, 120])
house_prices = np.array([150000, 200000, 210000, 250000, 280000])

# Calculate the mean of X and Y
mean_x = np.mean(house_sizes)
mean_y = np.mean(house_prices)

# Calculate the terms needed for the numerator and denominator of slope
numerator = sum((house_sizes - mean_x) * (house_prices - mean_y))
denominator = sum((house_sizes - mean_x)**2)

# Calculate slope
m = numerator / denominator

# Calculate y-intercept
b = mean_y - (m * mean_x)

print(f"The linear equation is: y = {m:.2f}x + {b:.2f}")

# Creating the regression line
regression_line = m * house_sizes + b

# Function to predict price for a given house size
def predict_price(size):
    return m * size + b

# Prediction
new_house_size = 90
predicted_price = predict_price(new_house_size)
print(f"Predicted price for a {new_house_size} sq m house: ${predicted_price:.2f}")

# Plotting
plt.scatter(house_sizes, house_prices, color='blue', label='Data points')
plt.plot(house_sizes, regression_line, color='red', label='Regression line')
plt.scatter(new_house_size, predicted_price, color='green', label='Prediction')
plt.xlabel('House Size (sq m)')
plt.ylabel('House Price')
plt.title('House Price vs Size - Linear Regression')
plt.legend()
plt.grid(True)
plt.show()

"""Exercise 2"""

import numpy as np
from scipy import stats
import matplotlib.pyplot as plt

# Given data
fertilizer_1 = [5, 6, 7, 6, 5]
fertilizer_2 = [7, 8, 7, 9, 8]
fertilizer_3 = [4, 5, 4, 3, 4]

# Perform one-way ANOVA
f_value, p_value = stats.f_oneway(fertilizer_1, fertilizer_2, fertilizer_3)

print(f"F-value: {f_value}")
print(f"p-value: {p_value}")

# Visualize the data
plt.figure(figsize=(10, 6))
plt.boxplot([fertilizer_1, fertilizer_2, fertilizer_3], labels=['Fertilizer 1', 'Fertilizer 2', 'Fertilizer 3'])
plt.title('Plant Growth by Fertilizer Type')
plt.ylabel('Growth (cm)')
plt.show()

# Additional statistics
groups = [fertilizer_1, fertilizer_2, fertilizer_3]
group_names = ['Fertilizer 1', 'Fertilizer 2', 'Fertilizer 3']

for i, group in enumerate(groups):
    print(f"\n{group_names[i]}:")
    print(f"  Mean: {np.mean(group):.2f}")
    print(f"  Median: {np.median(group):.2f}")
    print(f"  Standard Deviation: {np.std(group, ddof=1):.2f}")

"""Based on the p-value the fertilizers have significantly different effects on plant growth. If p-value bigger than 0.o5 we fail to reject the null hypothesis

Exercise 3
"""

from scipy.stats import binom

# Parameters
n = 10  # number of trials
k = 5   # number of successes
p = 0.5 # probability of success on each trial

# Calculate the probability
probability = binom.pmf(k, n, p)

print(f"The probability of getting exactly {k} heads in {n} coin flips is: {probability:.10f}")

"""Exercise 4"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# Create the dataset
data = pd.DataFrame({'age': [23, 25, 30, 35, 40], 'income': [35000, 40000, 50000, 60000, 70000]})

# Calculate Pearson correlation coefficient
pearson_corr, pearson_p = stats.pearsonr(data['age'], data['income'])

# Calculate Spearman correlation coefficient
spearman_corr, spearman_p = stats.spearmanr(data['age'], data['income'])

print(f"Pearson correlation coefficient: {pearson_corr:.4f}")
print(f"Pearson p-value: {pearson_p:.4f}")
print(f"Spearman correlation coefficient: {spearman_corr:.4f}")
print(f"Spearman p-value: {spearman_p:.4f}")

"""Exercise 5"""

# Create a scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x='age', y='income', data=data)
plt.title('Age vs Income')
plt.xlabel('Age')
plt.ylabel('Income')

# Add a trend line
sns.regplot(x='age', y='income', data=data, scatter=False, color='red')

plt.show()

# Create a heatmap of the correlation matrix
plt.figure(figsize=(8, 6))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0)
plt.title('Correlation Heatmap')
plt.show()