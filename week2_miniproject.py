# -*- coding: utf-8 -*-
"""week2/miniproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GRADdATWrQ5bDUlyc062KgT8FxZ7D1aG
"""

def display_board(board):
    corner = '*'
    vertical = '|'
    horizontal = '-'
    space = ' '


    for row in range(3):

        if row == 0:
            print(corner + (horizontal * 8 + corner) * 3)
        for line in range(3):
            for col in range(3):
                if line == 1:
                    symbol = board[row][col]
                    left_space = space * (4 - len(symbol))
                    right_space = space * 4
                    print(vertical + left_space + symbol + right_space, end='')
                else:
                    print(vertical + space * 8, end='')
            print(vertical)
        print(corner + (horizontal * 8 + corner) * 3)


def player_input(player, board):
    while True:

        row = int(input(f"Player {player}'s row (1-3): ")) - 1
        col = int(input(f"Player {player}'s column (1-3): ")) - 1
        if 0 <= row <= 2 and 0 <= col <= 2 and board[row][col] == "":
            return row, col
        else:
            print("That square is already occupied, try again.")



def make_move(player, board):
    row, col = player_input(player, board)
    board[row][col] = player
    return board

def play():
    board = [["" for _ in range(3)] for _ in range(3)]
    current_player = "O"

    for _ in range(9):  # max move quantity
        display_board(board)
        board = make_move(current_player, board)

        winner = check_win(board)
        if winner:
            display_board(board)
            print(f"Player {winner} wins!")
            return

        current_player = "X" if current_player == "O" else "O"

    display_board(board)
    print("It's a tie!")

def check_win(board):

    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != "":
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] != "":
            return board[0][i]


    if board[0][0] == board[1][1] == board[2][2] != "":
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != "":
        return board[0][2]

    return None
play()

import random

words_list = ['correction', 'childish', 'beach', 'python', 'assertive', 'interference', 'complete', 'share', 'credit card', 'rush', 'south']

word = random.choice(words_list)
masked_word = ['*' for c in word]
guessed_letters = []


hangman_visual = [
    " ____\n |  |\n |  0\n |\n |\n |\n_|___",
    " ____\n |  |\n |  0\n |  |\n |\n |\n_|___",
    " ____\n |  |\n |  0\n | /|\n |\n |\n_|___",
    " ____\n |  |\n |  0\n | /|\\\n |\n |\n_|___",
    " ____\n |  |\n |  0\n | /|\\\n | /\n |\n_|___",
    " ____\n |  |\n |  0\n | /|\\\n | / \\\n |\n_|___",
]

max_attempts = len(hangman_visual)
current_step = 0

print("Welcome to Hangman!")
print("Word to guess:", " ".join(masked_word))

while current_step < max_attempts and '*' in masked_word:
    guess = input("Guess a letter: ").lower()
    if guess in guessed_letters:
        print("You already guessed that letter. Try something else.")
        continue
    guessed_letters.append(guess)

    if guess in word:
        print("Correct guess!")
        masked_word = [guess if word[i] == guess else masked_word[i] for i in range(len(word))]
    else:
        print("Incorrect guess.")
        current_step += 1

    print("Word to guess:", " ".join(masked_word))
    if current_step > 0:
        print(hangman_visual[current_step - 1])

if '*' not in masked_word:
    print("Congratulations, you've guessed the word:", word)
else:
    print("Game over! The correct word was:", word)
    print(hangman_visual[-1])