# -*- coding: utf-8 -*-
"""week3/day4/xp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vUoa_OHBDWMQFz7EwDelj2M-myUSczrW
"""

class Pets:
    def __init__(self, animals):
        self.animals = animals

    def walk(self):
        for animal in self.animals:
            print(animal.walk())

class Cat:
    is_lazy = True

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def walk(self):
        return f'{self.name} is just walking around'

class Bengal(Cat):
    def sing(self, sounds):
        return f'{sounds}'

class Chartreux(Cat):
    def sing(self, sounds):
        return f'{sounds}'

class Siamese(Cat):
    def sing(self, sounds):
        return f'{sounds}'


cat1 = Bengal("Fluffy", 3)
cat2 = Chartreux("Whiskers", 2)
cat3 = Siamese("Shadow", 4)


all_cats = [cat1, cat2, cat3]


sara_pets = Pets(all_cats)


sara_pets.walk()

class Dog:
    def __init__(self, name, age, weight):
        self.name = name
        self.age = age
        self.weight = weight

    def bark(self):
        return f"{self.name} is barking"

    def run_speed(self):
        return self.weight / self.age * 10

    def fight(self, other_dog):
        # Calculate the fighting power of both dogs
        my_power = self.run_speed() * self.weight
        other_dog_power = other_dog.run_speed() * other_dog.weight

        # Determine the winner
        if my_power > other_dog_power:
            return f"{self.name} wins the fight"
        elif my_power < other_dog_power:
            return f"{other_dog.name} wins the fight"
        else:
            return "It's a tie"

# Creating three dog instances
dog1 = Dog("Rex", 5, 5)
dog2 = Dog("Buddy", 3, 12)
dog3 = Dog("Charlie", 7, 7)

# Testing the dogs' methods
print(dog1.bark())
print(f"Rex's running speed: {dog1.run_speed()} m/s")
print(f"Buddy's running speed: {dog2.run_speed()} m/s")
print(dog1.fight(dog2))
print(dog2.fight(dog3))

from dog import Dog
import random

class PetDog(Dog):
    def __init__(self, name, age, weight):
        super().__init__(name, age, weight)
        self.trained = False

    def train(self):
        print(self.bark())
        self.trained = True

    def play(self, *args):
        names = [dog.name for dog in args]
        print(f"{', '.join(names)} all play together")

    def do_a_trick(self):
        if self.trained:
            tricks = [
                f"{self.name} does a barrel roll",
                f"{self.name} stands on his back legs",
                f"{self.name} shakes your hand",
                f"{self.name} plays dead"
            ]
            print(random.choice(tricks))
        else:
            print(f"{self.name} is not trained yet.")

dog1 = PetDog("Rex", 5, 5)
dog2 = PetDog("Buddy", 3, 12)
dog3 = PetDog("Charlie", 7, 7)


dog1.train()

dog1.play(dog2, dog3)

dog1.do_a_trick()

class Family:
    def __init__(self, last_name, members=None):
        self.members = members if members is not None else []
        self.last_name = last_name

    def born(self, **kwargs):
        self.members.append(kwargs)
        print(f"Congratulations to the {self.last_name} family on the new child!")

    def is_18(self, name):
        for member in self.members:
            if member['name'] == name:
                return member['age'] >= 18
        return False  # In case the member is not found

    def family_presentation(self):
        print(f"The {self.last_name} Family:")
        for member in self.members:
            print(f"Name: {member['name']}, Age: {member['age']}, Gender: {member['gender']}, Is Child: {member['is_child']}")


family = Family("Smith", [
    {'name': 'Michael', 'age': 35, 'gender': 'Male', 'is_child': False},
    {'name': 'Sarah', 'age': 32, 'gender': 'Female', 'is_child': False}
])


family.born(name='Charlie', age=0, gender='Male', is_child=True)

print(f"Is Michael over 18? {family.is_18('Michael')}")

family.family_presentation()

class TheIncredibles(Family):
    def use_power(self, name):
        for member in self.members:
            if member['name'] == name:
                if member['age'] < 18:
                    raise Exception(f"{member['name']} is not over 18 years old")
                else:
                    print(f"{member['name']} uses their power: {member['power']}")
                    return
        print(f"No member named {name} found.")

    def incredible_presentation(self):
        print("Here is our powerful family:")
        super().family_presentation()


incredibles_family = TheIncredibles("Incredibles", [
    {'name':'Michael','age':35,'gender':'Male','is_child':False, 'power': 'fly', 'incredible_name':'MikeFly'},
    {'name':'Sarah','age':32,'gender':'Female','is_child':False, 'power': 'read minds', 'incredible_name':'SuperWoman'}
])


incredibles_family.incredible_presentation()


incredibles_family.born(name='Jack', age=0, gender='Male', is_child=True, power='Unknown Power', incredible_name='BabyJack')


incredibles_family.incredible_presentation()