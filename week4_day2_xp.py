# -*- coding: utf-8 -*-
"""week4/day2/xp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rp1KHW10qf65vVtB83V_-waw1CIxMuND
"""

class Currency:
    def __init__(self, currency, amount):
        self.currency = currency
        self.amount = amount

    def __str__(self):
        return f"{self.amount} {self.currency}"

    def __int__(self):
        return self.amount

    def __repr__(self):
        return f"{self.amount} {self.currency}"

    def __add__(self, other):
        if isinstance(other, int):
            return Currency(self.currency, self.amount + other)
        elif isinstance(other, Currency):
            if self.currency != other.currency:
                raise TypeError(f"Cannot add between Currency type <{self.currency}> and <{other.currency}>")
            return Currency(self.currency, self.amount + other.amount)
        else:
            raise TypeError("Unsupported operand types for +: Currency and {}".format(type(other)))

    def __iadd__(self, other):
        if isinstance(other, int):
            self.amount += other
            return self
        elif isinstance(other, Currency):
            if self.currency != other.currency:
                raise TypeError(f"Cannot add between Currency type <{self.currency}> and <{other.currency}>")
            self.amount += other.amount
            return self
        else:
            raise TypeError("Unsupported operand types for +=: Currency and {}".format(type(other)))

# Testing
c1 = Currency('dollar', 5)
c2 = Currency('dollar', 10)
c3 = Currency('shekel', 1)
c4 = Currency('shekel', 10)

print(str(c1))
print(int(c1))
print(repr(c1))

print(c1 + 5)
print(c1 + c2)

print(c1)

c1 += 5
print(c1)

c1 += c2
print(c1)


print(c1 + c3)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile func.py
# 
# def add_numbers(a, b):
#     result = a + b
#     print("The result of adding {} and {} is: {}".format(a, b, result))
#

from func import add_numbers

add_numbers(3, 5)

import string
import random

def generate_random_string(length):
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for _ in range(length))

random_string = generate_random_string(5)
print("Random string:", random_string)

import datetime

def display_current_date():
    current_date = datetime.date.today()
    print("Current date:", current_date)

display_current_date()

import datetime

def time_until_january_1st():

    current_datetime = datetime.datetime.now() + datetime.timedelta(hours=3)


    next_year = current_datetime.year + 1
    january_1st_next_year = datetime.datetime(next_year, 1, 1)


    time_left = january_1st_next_year - current_datetime


    days = time_left.days
    hours, remainder = divmod(time_left.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    print(f"The 1st of January is in {days} days and {hours:02}:{minutes:02}:{seconds:02} hours.")
    print(current_datetime)


time_until_january_1st()

import datetime

def minutes_lived():

    birthdate_str = input("Please enter your birthdate (YYYY-MM-DD): ")

    birth_datetime = datetime.datetime.strptime(birthdate_str, '%Y-%m-%d')

    current_datetime = datetime.datetime.now()

    minutes_lived = (current_datetime - birth_datetime).total_seconds() / 60

    return minutes_lived


minutes = minutes_lived()
print(f"You have lived approximately {minutes} minutes in your life.")

!pip install faker

from faker import Faker

fake = Faker()

users = []

def add_fake_user():

    user_data = {
        'name': fake.name(),
        'address': fake.address(),
        'language_code': fake.language_code()
    }

    users.append(user_data)

for _ in range(5):
    add_fake_user()


print(users)