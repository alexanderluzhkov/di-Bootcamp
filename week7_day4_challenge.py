# -*- coding: utf-8 -*-
"""Week7/day4/challenge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EohODj2w_bYmqc8z_Y8P8jn4WznINF0o
"""

from google.colab import files

files.upload()

import os

!mkdir -p ~/.kaggle

!mv kaggle.json ~/.kaggle/

!chmod 600 ~/.kaggle/kaggle.json

!ls -lha ~/.kaggle/

!pip install kaggle

from kaggle.api.kaggle_api_extended import KaggleApi
api = KaggleApi()
api.authenticate()

dataset = 'olgabelitskaya/flower-color-images'
download_path = 'flower-color-images.zip'
extracted_path = 'flower-color-images'

api.dataset_download_files(dataset, path='.', unzip=False)

import zipfile

with zipfile.ZipFile(download_path, 'r') as zip_ref:
    zip_ref.extractall(extracted_path)

!ls -lha flower-color-images/

import os
import random
import matplotlib.pyplot as plt
from PIL import Image, ImageOps


directory_path = '/content/flower-color-images/flowers/flowers'


all_files = os.listdir(directory_path)


image_files = [file for file in all_files if file.endswith(('png', 'jpg', 'jpeg'))]


num_display = 5
selected_images = random.sample(image_files, num_display)
print("Selected images:", selected_images)


def show_images(original, augmented, title):
    plt.figure(figsize=(12, 6))
    plt.subplot(1, 2, 1)
    plt.imshow(original)
    plt.title('Original Image')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(augmented)
    plt.title(title)
    plt.axis('off')

    plt.show()

for image_file in selected_images:
    image_path = os.path.join(directory_path, image_file)
    original_image = Image.open(image_path)

    # Rotate the image by 90 degrees
    rotated_image = original_image.rotate(90, expand=True)
    show_images(original_image, rotated_image, 'Rotated Image by 90 Degrees')

    # Flip the image horizontally
    flipped_image_horizontal = ImageOps.mirror(original_image)
    show_images(original_image, flipped_image_horizontal, 'Flipped Image Horizontally')

    # Flip the image vertically
    flipped_image_vertical = ImageOps.flip(original_image)
    show_images(original_image, flipped_image_vertical, 'Flipped Image Vertically')

    # Zoom in on the image by scaling it by 1.2x
    width, height = original_image.size
    zoomed_image = original_image.resize((int(width * 1.2), int(height * 1.2)), Image.ANTIALIAS)
    show_images(original_image, zoomed_image, 'Zoomed Image (1.2x)')