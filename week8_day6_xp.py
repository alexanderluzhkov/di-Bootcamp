# -*- coding: utf-8 -*-
"""Week8/day6/xp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N-LAqRL2nXf5IQiQ_AzX3DFz8VMe3fDY
"""



"""# Exercise 1
**Importance of Data Visualization:**
Simplifies Complex Data,
Reveals Patterns and Trends,
Facilitates Comparison,
Enhances Communication.
**Purpose of a Line Graph:**
Displays Continuous Data,
Identifies Patterns and Relationships.




"""

# Exercise 2

import matplotlib.pyplot as plt

# List of temperature values for each day of the week
temperatures = [72, 74, 76, 80, 82, 78, 75]

# List of days of the week
days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

# Create the plot
plt.figure(figsize=(10, 6))
plt.plot(days, temperatures, marker='o', linestyle='-', color='b')

# Adding title and labels
plt.title('Temperature Variations Over a Week')
plt.xlabel('Day')
plt.ylabel('Temperature (Â°F)')

# Show the plot
plt.grid(True)
plt.show()

# Exercise 3

import matplotlib.pyplot as plt

# List of sales values for each month
sales = [5000, 5500, 6200, 7000, 7500, 8000, 8500, 9000, 9500, 10000, 10500, 11000]

# List of months
months = ["January", "February", "March", "April", "May", "June",
          "July", "August", "September", "October", "November", "December"]

# Create the bar chart
plt.figure(figsize=(12, 6))
plt.bar(months, sales, color='skyblue')

# Adding title and labels
plt.title('Monthly Sales Data for Retail Store')
plt.xlabel('Month')
plt.ylabel('Sales Amount ($)')
plt.xticks(rotation=45)  # Rotate the month labels for better readability

# Display the plot
plt.grid(axis='y')  # Add grid lines for the y-axis to aid readability
plt.show()

# Exercise 4

import pandas as pd

# Download the CSV file from the GitHub repository
!wget https://github.com/intern2grow/sales-data-analysis/raw/main/sales_data.csv

# Load the dataset
sales_data = pd.read_csv('sales_data.csv')

# Display the first few rows to understand the data structure
print(sales_data.head())

# Check for missing values
print(sales_data.isnull().sum())

# Fill or handle missing values if necessary
sales_data = sales_data.dropna()  # Dropping rows with missing values for simplicity

# Convert 'date' column to datetime type
sales_data['date'] = pd.to_datetime(sales_data['date'])

# Verify data types
print(sales_data.dtypes)

# Calculating the Total quantity of products sold
total_quantity_sold = sales_data['quantity'].sum()
print(f"Total quantity of products sold: {total_quantity_sold}")

# Identifying the Category with the Highest Revenue

# Calculate total revenue for each category
category_revenue = sales_data.groupby('category')['revenue'].sum()

# Identify the category with the highest revenue
highest_revenue_category = category_revenue.idxmax()
highest_revenue_amount = category_revenue.max()

print(f"The category with the highest revenue is: {highest_revenue_category}")
print(f"Total revenue generated by this category: ${highest_revenue_amount:.2f}")

# Calculate the average revenue per sale

average_revenue_per_sale = sales_data['revenue'].mean()
print(f"Average revenue per sale: ${average_revenue_per_sale:.2f}")

# Creating a Bar Chart for Quarterly Revenue

import matplotlib.pyplot as plt

# Extract the quarter from the date
sales_data['quarter'] = sales_data['date'].dt.to_period('Q')

# Calculate total revenue for each quarter
quarterly_revenue = sales_data.groupby('quarter')['revenue'].sum()

# Convert the index to string for plotting
quarters = [str(quarter) for quarter in quarterly_revenue.index]

# Create the bar chart
plt.figure(figsize=(10, 6))
plt.bar(quarters, quarterly_revenue, color='skyblue')

# Adding title and labels
plt.title('Total Revenue Generated in Each Quarter')
plt.xlabel('Quarter')
plt.ylabel('Revenue ($)')
plt.xticks(rotation=45)

# Show the plot
plt.grid(axis='y')
plt.show()

# Exercise 5

# Part 1
import matplotlib.pyplot as plt
import numpy as np

# Generate x values from -10 to 10
x_values = np.linspace(-10, 10, 400)

# Calculate y values using the function y = x^2
y_values = x_values ** 2

# Create the plot
plt.figure(figsize=(10, 6))
plt.plot(x_values, y_values, label='$y = x^2$', color='b')

# Add title and labels
plt.title('Plot of the Function $y = x^2$')
plt.xlabel('x values')
plt.ylabel('y values')

# Show the grid for better readability
plt.grid(True)

# Show the plot
plt.legend()
plt.show()

# Exercise 5
# Part 2

import matplotlib.pyplot as plt

# Define the data
products = ['A', 'B', 'C', 'D']
sales = [15, 30, 45, 20]

# Create the bar chart
plt.figure(figsize=(8, 5))
plt.bar(products, sales, color='skyblue')

# Add title and labels
plt.title('Weekly Sales Data of Products')
plt.xlabel('Products')
plt.ylabel('Sales (Units)')

# Display the chart
plt.grid(axis='y')  # Add grid lines
plt.show()

# Exercise 5
# Part 3

import matplotlib.pyplot as plt

# Define the data
labels = ['Apples', 'Bananas', 'Cherries', 'Dates']
sizes = [40, 30, 20, 10]
colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']  # Custom colors for each fruit

# Create the pie chart
plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)

# Add a title
plt.title('Favorite Fruits of a Group of People')

# Add a legend
plt.legend(labels, title="Fruits", loc="upper right")

# Display the chart
plt.show()