# -*- coding: utf-8 -*-
"""Week9/day4/challenge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a4VLTCLviZpfD0EfLfakDx6B079_4CXl
"""

# Install the Kaggle API client
!pip install -q kaggle

#Upload tocken
from google.colab import files
files.upload()

# Create a Kaggle directory
!mkdir -p ~/.kaggle

# Move the kaggle.json file to the created directory
!cp kaggle.json ~/.kaggle/

# Change the permissions of the file
!chmod 600 ~/.kaggle/kaggle.json

# Verify that the Kaggle API is properly set up
!kaggle datasets list

# Download the dataset from Kaggle
!kaggle datasets download -d juhi1994/superstore

# Unzip the dataset
!unzip -o superstore.zip

# Import library
import pandas as pd

# Load the dataset into a DataFrame
df = pd.read_excel('US Superstore data.xls')

# Display data types of all columns
print("Data types of all columns:")
print(df.dtypes)

# Display the number of missing values in each column
print("\nNumber of missing values in each column:")
print(df.isnull().sum())

# Display the total number of rows
print("\nTotal number of rows:", len(df))

df.head()

!pip install -q plotly

# Import necessary libraries
import pandas as pd
import plotly.express as px

# Load the dataset into a DataFrame
df = pd.read_excel('US Superstore data.xls')

# Extract year from 'Ship Date'
df['Year'] = df['Ship Date'].dt.year

# Group by year and calculate the total sales for each year
sales_trends = df.groupby('Year')['Sales'].sum().reset_index()

# Create an interactive line chart using Plotly
fig = px.line(sales_trends, x='Year', y='Sales', title='Sales Trends Over the Years', labels={'Sales': 'Total Sales', 'Year': 'Year'})

# Update x-axis to show only whole years
fig.update_xaxes(tickvals=sales_trends['Year'])

# Display the interactive line chart
fig.show()

# Load the dataset into a DataFrame
df = pd.read_excel('US Superstore data.xls')

# Convert 'Ship Date' to datetime format if not already
#df['Ship Date'] = pd.to_datetime(df['Ship Date'])

# Extract year from 'Ship Date'
df['Year'] = df['Ship Date'].dt.year

# Filter the dataset for the year 2018
sales_2018 = df[df['Year'] == 2018]

# Display all rows of the sales in 2018
sales_2018

# Install the library
!pip install -q plotly

# Import libraries
import pandas as pd
import plotly.express as px

# Load the dataset into a DataFrame
df = pd.read_excel('US Superstore data.xls')

# Extract year from 'Ship Date'
df['Year'] = df['Ship Date'].dt.year

# Group by year and calculate the total sales for each year
sales_trends = df.groupby('Year')['Sales'].sum().reset_index()

# Verify the sales data for 2018
sales_2018 = df[df['Year'] == 2018]
print("Sales data for 2018:")
print(sales_2018)

# Verify the sales trends data
print("Sales trends data:")
print(sales_trends)

# Create an interactive line chart using Plotly
fig = px.line(sales_trends, x='Year', y='Sales', title='Sales Trends Over the Years', labels={'Sales': 'Total Sales', 'Year': 'Year'})

# Update x-axis to show only whole years
fig.update_xaxes(tickvals=sales_trends['Year'])

# Display the interactive line chart
fig.show()

# Install the library
!pip install -q plotly

# Import libraries
import pandas as pd
import plotly.express as px

# Load the dataset into a DataFrame
df = pd.read_excel('US Superstore data.xls')

# Mapping of state names to their respective abbreviations
state_abbreviations = {
    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA', 'Colorado': 'CO',
    'Connecticut': 'CT', 'Delaware': 'DE', 'District of Columbia': 'DC', 'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI',
    'Idaho': 'ID', 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA',
    'Maine': 'ME', 'Maryland': 'MD', 'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',
    'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ',
    'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK',
    'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD', 'Tennessee': 'TN',
    'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY'
}

# Add a new column for state abbreviations
df['State Abbrev'] = df['State'].map(state_abbreviations)

# Aggregate sales data by state abbreviation
sales_by_state = df.groupby('State Abbrev')['Sales'].sum().reset_index()

# Create a choropleth map using Plotly
fig = px.choropleth(
    sales_by_state,
    locations='State Abbrev',
    locationmode='USA-states',
    color='Sales',
    hover_name='State Abbrev',
    color_continuous_scale=px.colors.sequential.Plasma,
    title='Sales Distribution by State in USA',
    scope='usa'
)

# Display the interactive map
fig.show()

# Install the library
!pip install -q plotnine

# Import libraries
import pandas as pd
from plotnine import ggplot, aes, geom_bar, coord_flip, labs, theme_minimal, theme, element_text

# Load the dataset into a DataFrame
df = pd.read_excel('US Superstore data.xls')

# Aggregate sales data by product name
sales_by_product = df.groupby('Product Name')['Sales'].sum().reset_index()

# Sort the products by sales and select the top 10
top_10_products = sales_by_product.sort_values(by='Sales', ascending=False).head(10)

# Sort the top 10 products by sales for plotting
top_10_products = top_10_products.sort_values(by='Sales', ascending=True)

# Create a bar chart using Plotnine
plot = (ggplot(top_10_products, aes(x='Product Name', y='Sales')) +
        geom_bar(stat='identity') +
        coord_flip() +
        labs(title='Top 10 Products by Sales', x='Product Name', y='Sales') +
        theme_minimal() +
        theme(
            axis_text_x=element_text(size=10),
            axis_text_y=element_text(size=12),
            plot_title=element_text(size=14, face='bold', ha='center'),
            figure_size=(10, 8)
        ))

# Display the bar chart
print(plot)

# Install the library
!pip install -q plotnine

# Import necessary libraries
import pandas as pd
from plotnine import ggplot, aes, geom_point, labs, theme_minimal, theme, element_text

# Load the dataset into a DataFrame
df = pd.read_excel('US Superstore data.xls')

# Create a scatter plot using Plotnine
plot = (ggplot(df, aes(x='Discount', y='Profit')) +
        geom_point(alpha=0.6) +
        labs(title='Relationship between Profit and Discount', x='Discount', y='Profit') +
        theme_minimal() +
        theme(
            plot_title=element_text(size=14, face='bold', ha='center'),
            axis_text_x=element_text(size=10),
            axis_text_y=element_text(size=10),
            figure_size=(10, 6)
        ))

# Display the scatter plot
print(plot)

# Install the library
!pip install -q plotly

# Import libraries
import pandas as pd
import plotly.express as px

# Load the dataset into a DataFrame
df = pd.read_excel('US Superstore data.xls')

# Mapping of state names to their respective abbreviations
state_abbreviations = {
    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA', 'Colorado': 'CO',
    'Connecticut': 'CT', 'Delaware': 'DE', 'District of Columbia': 'DC', 'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI',
    'Idaho': 'ID', 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA',
    'Maine': 'ME', 'Maryland': 'MD', 'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',
    'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ',
    'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK',
    'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD', 'Tennessee': 'TN',
    'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY'
}

# Filter data for the years 2014 and 2017
df['Order Date'] = pd.to_datetime(df['Order Date'])
df_2014 = df[df['Order Date'].dt.year == 2014]
df_2017 = df[df['Order Date'].dt.year == 2017]

# Calculate total sales for each state in 2014 and 2017
sales_2014 = df_2014.groupby('State')['Sales'].sum().reset_index()
sales_2017 = df_2017.groupby('State')['Sales'].sum().reset_index()

# Rename columns for merging
sales_2014 = sales_2014.rename(columns={'Sales': 'Sales_2014'})
sales_2017 = sales_2017.rename(columns={'Sales': 'Sales_2017'})

# Merge the dataframes on 'State'
sales_comparison = pd.merge(sales_2014, sales_2017, on='State')

# Calculate the percentage change in sales from 2014 to 2017
sales_comparison['Percent_Change'] = ((sales_comparison['Sales_2017'] - sales_comparison['Sales_2014']) / sales_comparison['Sales_2014']) * 100

# Add state abbreviations
sales_comparison['State Abbrev'] = sales_comparison['State'].map(state_abbreviations)

# Create a choropleth map using Plotly with a custom color scale
fig = px.choropleth(
    sales_comparison,
    locations='State Abbrev',
    locationmode='USA-states',
    color='Sales_2017',
    hover_name='State',
    hover_data={'Sales_2014': True, 'Sales_2017': True, 'Percent_Change': True, 'State Abbrev': False},
    color_continuous_scale=[
        [0, 'blue'],
        [0.5, 'yellow'],
        [1, 'red']
    ],
    title='Sales Distribution by State in 2017 and Percentage Change from 2014',
    scope='usa'
)

# Display the interactive map
fig.show()

# Import libraries
import pandas as pd

# Load the dataset into a DataFrame
df = pd.read_excel('US Superstore data.xls')

# Calculate the total sales for each product
total_sales_by_product = df.groupby('Product Name')['Sales'].sum().reset_index()

# Sort the products by total sales and select the top 10
top_10_products = total_sales_by_product.sort_values(by='Sales', ascending=False).head(10)

# Get the names of the top 10 products
top_10_product_names = top_10_products['Product Name'].tolist()

# Filter the dataset for the top 10 products
top_10_df = df[df['Product Name'].isin(top_10_product_names)]

# Filter data for the years 2014 and 2017
df['Order Date'] = pd.to_datetime(df['Order Date'])
df_2014 = df[df['Order Date'].dt.year == 2014]
df_2017 = df[df['Order Date'].dt.year == 2017]

# Calculate total sales for all products in 2014 and 2017
total_sales_2014 = df_2014['Sales'].sum()
total_sales_2017 = df_2017['Sales'].sum()

# Calculate total sales for the top 10 products in 2014 and 2017
top_10_sales_2014 = df_2014[df_2014['Product Name'].isin(top_10_product_names)]['Sales'].sum()
top_10_sales_2017 = df_2017[df_2017['Product Name'].isin(top_10_product_names)]['Sales'].sum()

# Calculate the share of total sales for the top 10 products
share_top_10_2014 = (top_10_sales_2014 / total_sales_2014) * 100
share_top_10_2017 = (top_10_sales_2017 / total_sales_2017) * 100

print(f"Share of total sales for top 10 products in 2014: {share_top_10_2014:.2f}%")
print(f"Share of total sales for top 10 products in 2017: {share_top_10_2017:.2f}%")
print("\nList of Top 10 Products by Sales:")
for product in top_10_product_names:
    print(f"- {product}")

# Import libraries
import pandas as pd

# Load the dataset into a DataFrame
df = pd.read_excel('US Superstore data.xls')

# Calculate the 'Margin' as profit divided by sales
df['Margin'] = df['Profit'] / df['Sales']

# Filter the dataset for the product "Canon imageCLASS 2200 Advanced Copier"
product_name = "Canon imageCLASS 2200 Advanced Copier"
product_df = df[df['Product Name'] == product_name]

# Filter data for the years 2014 and 2017
df['Order Date'] = pd.to_datetime(df['Order Date'])
product_df_2014 = product_df[product_df['Order Date'].dt.year == 2014]
product_df_2017 = product_df[product_df['Order Date'].dt.year == 2017]

# Calculate total profit and margin for the product in 2014
profit_2014 = product_df_2014['Profit'].sum()
sales_2014 = product_df_2014['Sales'].sum()
margin_2014 = profit_2014 / sales_2014 if sales_2014 != 0 else 0

# Calculate total profit and margin for the product in 2017
profit_2017 = product_df_2017['Profit'].sum()
sales_2017 = product_df_2017['Sales'].sum()
margin_2017 = profit_2017 / sales_2017 if sales_2017 != 0 else 0

print(f"Canon imageCLASS 2200 Advanced Copier - 2014:")
print(f"Total Profit: ${profit_2014:.2f}")
print(f"Margin: {margin_2014:.2%}")

print(f"\nCanon imageCLASS 2200 Advanced Copier - 2017:")
print(f"Total Profit: ${profit_2017:.2f}")
print(f"Margin: {margin_2017:.2%}")

# Import library
import pandas as pd

# Load the dataset into a DataFrame
df = pd.read_excel('US Superstore data.xls')

# Calculate the total sales for each product
total_sales_by_product = df.groupby('Product Name')['Sales'].sum().reset_index()

# Sort the products by total sales and select the top 10
top_10_products = total_sales_by_product.sort_values(by='Sales', ascending=False).head(10)

# Get the names of the top 10 products
top_10_product_names = top_10_products['Product Name'].tolist()

# Filter the dataset for the top 10 products
top_10_df = df[df['Product Name'].isin(top_10_product_names)]

# Filter data for the year 2017
df['Order Date'] = pd.to_datetime(df['Order Date'])
df_2017 = df[df['Order Date'].dt.year == 2017]

# Define the list of specified states
specified_states = ['New York', 'Pennsylvania', 'Texas', 'California', 'Washington']

# Calculate total sales for all products in 2017 for each specified state and for the rest of the states
df_2017['Group'] = df_2017['State'].apply(lambda x: x if x in specified_states else 'Rest of States')
total_sales_2017_by_state = df_2017.groupby('Group')['Sales'].sum().reset_index()

# Calculate total sales for the top 10 products in 2017 for each specified state and for the rest of the states
top_10_sales_2017_by_state = df_2017[df_2017['Product Name'].isin(top_10_product_names)].groupby('Group')['Sales'].sum().reset_index()

# Merge the total sales and top 10 sales data
merged_sales = pd.merge(total_sales_2017_by_state, top_10_sales_2017_by_state, on='Group', how='left', suffixes=('_Total', '_Top10'))
merged_sales.fillna(0, inplace=True)  # Replace NaN values with 0 for states without top 10 sales

# Calculate the share of total sales for the top 10 products
merged_sales['Share_Top10'] = (merged_sales['Sales_Top10'] / merged_sales['Sales_Total']) * 100

print(merged_sales)

# Import library
import pandas as pd

# Load the dataset into a DataFrame
df = pd.read_excel('US Superstore data.xls')

# Calculate the total sales for each product
total_sales_by_product = df.groupby('Product Name')['Sales'].sum().reset_index()

# Sort the products by total sales and select the top 10
top_10_products = total_sales_by_product.sort_values(by='Sales', ascending=False).head(10)

# Get the names of the top 10 products
top_10_product_names = top_10_products['Product Name'].tolist()

# Filter data for the year 2017
df['Order Date'] = pd.to_datetime(df['Order Date'])
df_2017 = df[df['Order Date'].dt.year == 2017]

# Define the list of specified states
specified_states = ['New York', 'Pennsylvania', 'Texas', 'California', 'Washington']

# Calculate total sales for all products in 2017 for each specified state and for the rest of the states
df_2017['Group'] = df_2017['State'].apply(lambda x: x if x in specified_states else 'Rest of States')
total_sales_2017_by_group = df_2017.groupby('Group')['Sales'].sum().reset_index()

# Calculate total sales for the top 10 products in 2017 for each specified state and for the rest of the states
top_10_sales_2017_by_group = df_2017[df_2017['Product Name'].isin(top_10_product_names)].groupby('Group')['Sales'].sum().reset_index()

# Merge the total sales and top 10 sales data
merged_sales = pd.merge(total_sales_2017_by_group, top_10_sales_2017_by_group, on='Group', how='left', suffixes=('_Total', '_Top10'))
merged_sales.fillna(0, inplace=True)  # Replace NaN values with 0 for groups without top 10 sales

# Calculate the share of total sales for the top 10 products
merged_sales['Share_Top10'] = (merged_sales['Sales_Top10'] / merged_sales['Sales_Total']) * 100

# Display the results
print(merged_sales)

# Share of top 10 products for the rest of states together
rest_of_states_share = merged_sales[merged_sales['Group'] == 'Rest of States']['Share_Top10'].values[0]
print(f"\nShare of top 10 products in the rest of the states together: {rest_of_states_share:.2f}%")